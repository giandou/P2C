Scelta della versione di PHP per il front-end

Il Changelog per la versione 5.3 di PHP, rilasciata il 30 giugno 2009, recita "Replaced all flex based scanners with re2c based scanners. (Marcus, Nuno, Scott)" [http://it2.php.net/ChangeLog-5.php], il che significa che da quel momento in poi Flex è stato rimpiazzato con RE2C, uno scanner C/C++ rigorosamente open [http://re2c.org/] che a detta dei tre maggiori sviluppatori di PHP prometteva di generare analizzatori lessicali molto veloci e più flessibili di Flex [http://marc.info/?l=php-internals&m=120449656400467&w=2]. Come si legge nella citata mail alla lista, Marcus Boerger Nuno Lopes, Scott MacVicar, oltre a voler ottenere un analizzatore più rapido, sono stati spinti verso lo switch dal fatto che l'analizzatore di PHP fino alla versione 5.3 usava una versione datata di Flex. Quindi, nello sviluppo dell'interprete del linguaggio PHP, la scelta sarebbe stata o di aggiornare ad una versione più recente di flex o di rimpiazzarlo totalmente. Dai test fatti in quel periodo i tre hanno ottenuto incrementi del 20% nelle performance dello scanner, e del 2% nei test sul codice, il tutto senza ottimizzazioni. Infine ulteriori vantaggi previsti erano dati dal supporto alle principali codifiche (ASCII, UTF-8, UTF-16, UTF-32), l'integrazione con Lemon [Nota 1] (prevista per le versioni future di PHP), ed in ultimo la possibilità di ottenere uno scanner reentrant [Nota 2].

Quanto detto é una premessa alla scelta della versione del linguaggio da utilizzata per la generazione del front-end, scelta ricaduta sul fatto di avere una base di partenza per le regole da dare in pasto all'analizzatore lessicale.

Prelievo dei sorgenti di PHP 5.2 tramite SVN [REF: http://www.php.net/svn.php]

Comando
svn checkout https://svn.php.net/repository/php/php-src/branches/PHP_5_2 php-src-5.2

Nota 1 (Lemon): [http://www.hwaci.com/sw/lemon/] Parser LARL(1) non compatibile con YACC/BISON che a detta degli autori usa una grammatica meno predisposta ad errori di programmazione, che genera parser rientranti e thread-safe. Infine usa non terminali "distruttori" che rendono più semplice scrivere scanner che non consumano troppa memoria.

Nota 2 (Reentrant scanners): possibilità per una scanner di essere eseguito su più thread. come si legge dal manuale, anche Flex offre questa capacità [http://flex.sourceforge.net/manual/Reentrant.html].


